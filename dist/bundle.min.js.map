{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://mixer-game/./src/index.ts","webpack://mixer-game/webpack/startup"],"sourcesContent":["// 定義類型\r\ntype TrackName = 'vocal' | 'guitar' | 'piano' | 'other' | 'bass' | 'drum';\r\ntype AudioNodes = {\r\n    [key in TrackName]: AudioBufferSourceNode;\r\n};\r\ntype GainNodes = {\r\n    [key in TrackName]: GainNode;\r\n};\r\ntype AnalyserNodes = {\r\n    [key in TrackName]: AnalyserNode;\r\n};\r\ntype AudioBuffers = {\r\n    [key in TrackName]: AudioBuffer;\r\n};\r\ntype RandomGains = {\r\n    [key in TrackName]: number;\r\n};\r\ntype PlayerSettings = {\r\n    [key in TrackName]: number;\r\n};\r\n\r\n// 音頻混音器遊戲\r\nclass MixerGame {\r\n    private tracksBaseUrl: string;\r\n    private tracks: TrackName[];\r\n    private audioContext: AudioContext;\r\n    private audioBuffers: AudioBuffers;\r\n    private audioSources: AudioNodes;\r\n    private gainNodes: GainNodes;\r\n    private analyserNodes: AnalyserNodes;\r\n    private masterGainNode: GainNode;\r\n    private randomGains: RandomGains;\r\n    private isAudioInitialized: boolean = false;\r\n    private isAudioLoaded: boolean = false;\r\n    private isAnswerMode: boolean = false;\r\n    private playerSettings: PlayerSettings = {\r\n        vocal: 0.5,\r\n        guitar: 0.5,\r\n        piano: 0.5,\r\n        other: 0.5,\r\n        bass: 0.5,\r\n        drum: 0.5\r\n    };\r\n    private isSubmitted: boolean = false;\r\n    private isComparisonMode: boolean = false;\r\n    private isPlaying: boolean = false;\r\n    private startTime: number = 0;\r\n    private pauseTime: number = 0;\r\n\r\n    constructor() {\r\n        const isLocalDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\r\n        this.tracksBaseUrl = isLocalDevelopment\r\n            ? '../UpLifeSongs/以斯拉 - 至高全能神的榮光'\r\n            : '../../UpLifeSongs/以斯拉 - 至高全能神的榮光';\r\n        this.tracks = ['vocal', 'guitar', 'piano', 'other', 'bass', 'drum'];\r\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n        this.audioBuffers = {} as AudioBuffers;\r\n        this.audioSources = {} as AudioNodes;\r\n        this.gainNodes = {} as GainNodes;\r\n        this.analyserNodes = {} as AnalyserNodes;\r\n        this.masterGainNode = this.audioContext.createGain();\r\n        this.randomGains = {} as RandomGains;\r\n\r\n        this.initGame();\r\n    }\r\n\r\n    private initAudio(): void {\r\n        if (this.isAudioInitialized) return;\r\n        \r\n        this.masterGainNode.connect(this.audioContext.destination);\r\n\r\n        this.tracks.forEach(track => {\r\n            this.gainNodes[track] = this.audioContext.createGain();\r\n            this.analyserNodes[track] = this.audioContext.createAnalyser();\r\n            this.gainNodes[track].connect(this.analyserNodes[track]);\r\n            this.analyserNodes[track].connect(this.masterGainNode);\r\n            this.randomGains[track] = Math.exp(Math.random() * Math.log(4)) / 2;\r\n            \r\n            const fader = document.getElementById(`${track}-fader`)?.querySelector('input') as HTMLInputElement;\r\n            if (fader) {\r\n                fader.value = '0.5';\r\n                this.setTrackVolume(track, 0.5);\r\n            }\r\n        });\r\n\r\n        this.isAudioInitialized = true;\r\n    }\r\n\r\n    private async loadAudio(): Promise<void> {\r\n        const playPauseBtn = document.getElementById('playPauseBtn') as HTMLButtonElement;\r\n        playPauseBtn.textContent = '載入中';\r\n        playPauseBtn.disabled = true;\r\n\r\n        try {\r\n            await Promise.all(this.tracks.map(async (track) => {\r\n                const response = await fetch(`${this.tracksBaseUrl}/${track}.mp3`);\r\n                const audioData = await response.arrayBuffer();\r\n                this.audioBuffers[track] = await this.audioContext.decodeAudioData(audioData);\r\n            }));\r\n\r\n            this.isAudioLoaded = true;\r\n            playPauseBtn.innerHTML = '&#9658;';\r\n            playPauseBtn.disabled = false;\r\n            console.log('所有音軌已成功載入');\r\n        } catch (error) {\r\n            console.error('載入音頻時發生錯誤:', error);\r\n            playPauseBtn.textContent = '載入失敗';\r\n            playPauseBtn.disabled = false;\r\n        }\r\n    }\r\n\r\n    private createAudioSources(): void {\r\n        this.tracks.forEach(track => {\r\n            if (this.audioSources[track]) {\r\n                this.audioSources[track].disconnect();\r\n            }\r\n            this.audioSources[track] = this.audioContext.createBufferSource();\r\n            this.audioSources[track].buffer = this.audioBuffers[track];\r\n            this.audioSources[track].connect(this.gainNodes[track]);\r\n            this.audioSources[track].loop = true;\r\n        });\r\n    }\r\n\r\n    private togglePlayPause(): void {\r\n        if (!this.isAudioInitialized) {\r\n            this.initAudio();\r\n            this.loadAudio();\r\n            return;\r\n        }\r\n\r\n        if (!this.isAudioLoaded) return;\r\n\r\n        if (this.isPlaying) {\r\n            this.audioContext.suspend();\r\n            this.pauseTime = this.audioContext.currentTime;\r\n        } else {\r\n            this.audioContext.resume();\r\n            if (!this.audioSources[this.tracks[0]] || !this.audioSources[this.tracks[0]].buffer) {\r\n                this.createAudioSources();\r\n                this.startTime = this.audioContext.currentTime;\r\n                this.tracks.forEach(track => this.audioSources[track].start());\r\n            } else {\r\n                this.startTime += this.audioContext.currentTime - this.pauseTime;\r\n            }\r\n            requestAnimationFrame(() => this.updateTimeSlider());\r\n        }\r\n        this.isPlaying = !this.isPlaying;\r\n        const playPauseBtn = document.getElementById('playPauseBtn') as HTMLButtonElement;\r\n        playPauseBtn.innerHTML = this.isPlaying ? '&#10074;&#10074;' : '&#9658;';\r\n    }\r\n\r\n    private updateTimeSlider(): void {\r\n        if (!this.isPlaying) return;\r\n        const currentTime = this.audioContext.currentTime - this.startTime;\r\n        const duration = this.audioBuffers[this.tracks[0]].duration;\r\n        const percentage = (currentTime / duration) * 100;\r\n        const timeSlider = document.getElementById('timeSlider') as HTMLInputElement;\r\n        timeSlider.value = percentage.toString();\r\n        requestAnimationFrame(() => this.updateTimeSlider());\r\n    }\r\n\r\n    private setMasterVolume(volume: number): void {\r\n        if (!this.isAudioInitialized) return;\r\n        this.masterGainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);\r\n    }\r\n\r\n    private gainToFader(gain: number): number {\r\n        return Math.log(gain / 0.25) / Math.log(16);\r\n    }\r\n\r\n    private faderToGain(faderValue: number): number {\r\n        return 0.25 * Math.pow(16, faderValue);\r\n    }\r\n\r\n    private setTrackVolume(track: TrackName, faderValue: number): void {\r\n        if (!this.isAudioInitialized) return;\r\n        const gainValue = this.faderToGain(faderValue);\r\n        this.gainNodes[track].gain.setValueAtTime(gainValue, this.audioContext.currentTime);\r\n    }\r\n\r\n    private setPlaybackPosition(position: number): void {\r\n        if (!this.isAudioInitialized || !this.isAudioLoaded) return;\r\n        const duration = this.audioBuffers[this.tracks[0]].duration;\r\n        const newTime = (position / 100) * duration;\r\n        \r\n        const wasPlaying = this.isPlaying;\r\n        if (this.isPlaying) {\r\n            this.audioContext.suspend();\r\n        }\r\n        \r\n        this.createAudioSources();\r\n        this.startTime = this.audioContext.currentTime - newTime;\r\n        this.tracks.forEach(track => this.audioSources[track].start(0, newTime));\r\n        \r\n        if (wasPlaying) {\r\n            this.audioContext.resume();\r\n            requestAnimationFrame(() => this.updateTimeSlider());\r\n        }\r\n        this.isPlaying = wasPlaying;\r\n        const playPauseBtn = document.getElementById('playPauseBtn') as HTMLButtonElement;\r\n        playPauseBtn.innerHTML = this.isPlaying ? '&#10074;&#10074;' : '&#9658;';\r\n    }\r\n\r\n    private calculateScore(): number {\r\n        if (!this.isAudioInitialized || !this.isAudioLoaded) return 0;\r\n        let totalDifference = 0;\r\n        this.tracks.forEach(track => {\r\n            const faderValue = this.playerSettings[track] || 0.5;\r\n            const userGain = this.faderToGain(faderValue);\r\n            const targetGain = 1 / this.randomGains[track];\r\n            const logDifference = Math.abs(Math.log2(userGain) - Math.log2(targetGain));\r\n            totalDifference += logDifference;\r\n        });\r\n        const score = Math.max(0, 100 - (totalDifference / this.tracks.length) * 25);\r\n        return Math.round(score);\r\n    }\r\n\r\n    private toggleComparisonMode(isComparison: boolean): void {\r\n        this.isComparisonMode = isComparison;\r\n        this.tracks.forEach(track => {\r\n            const fader = document.getElementById(`${track}-fader`)?.querySelector('input') as HTMLInputElement;\r\n            if (isComparison) {\r\n                this.setTrackVolume(track, this.gainToFader(1 / this.randomGains[track]));\r\n                if (this.isSubmitted) {\r\n                    fader.value = this.gainToFader(1 / this.randomGains[track]).toString();\r\n                }\r\n            } else {\r\n                this.setTrackVolume(track, this.playerSettings[track] || 0.5);\r\n                fader.value = (this.playerSettings[track] || 0.5).toString();\r\n            }\r\n            fader.disabled = isComparison;\r\n        });\r\n    }\r\n\r\n    private initGame(): void {\r\n        const playPauseBtn = document.getElementById('playPauseBtn') as HTMLButtonElement;\r\n        playPauseBtn.addEventListener('click', () => this.togglePlayPause());\r\n\r\n        const masterVolume = document.getElementById('masterVolume') as HTMLInputElement;\r\n        masterVolume.addEventListener('input', (e) => this.setMasterVolume(parseFloat((e.target as HTMLInputElement).value)));\r\n\r\n        const timeSlider = document.getElementById('timeSlider') as HTMLInputElement;\r\n        timeSlider.addEventListener('input', (e) => this.setPlaybackPosition(parseFloat((e.target as HTMLInputElement).value)));\r\n        \r\n        this.tracks.forEach(track => {\r\n            const fader = document.getElementById(`${track}-fader`)?.querySelector('input') as HTMLInputElement;\r\n            fader.addEventListener('input', (e) => {\r\n                if (!this.isAnswerMode) {\r\n                    const value = parseFloat((e.target as HTMLInputElement).value);\r\n                    this.setTrackVolume(track, value);\r\n                    this.playerSettings[track] = value;\r\n                }\r\n            });\r\n        });\r\n\r\n        const modeToggleCheckbox = document.getElementById('modeToggleCheckbox') as HTMLInputElement;\r\n        modeToggleCheckbox.addEventListener('change', (e) => {\r\n            this.toggleComparisonMode((e.target as HTMLInputElement).checked);\r\n        });\r\n\r\n        const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;\r\n        submitBtn.addEventListener('click', () => {\r\n            const score = this.calculateScore();\r\n            const scoreDisplay = document.getElementById('scoreDisplay') as HTMLSpanElement;\r\n            scoreDisplay.style.visibility = 'visible';\r\n            scoreDisplay.textContent = score.toString();\r\n            const comparisonLabel = document.getElementById('comparisonLabel') as HTMLSpanElement;\r\n            comparisonLabel.textContent = '正確答案';\r\n            this.isSubmitted = true;\r\n            modeToggleCheckbox.checked = false;\r\n            this.toggleComparisonMode(false);\r\n        });\r\n    }\r\n}\r\n\r\n// 開始遊戲\r\nnew MixerGame();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[156]();\n"],"names":["constructor","isAudioInitialized","isAudioLoaded","isAnswerMode","playerSettings","vocal","guitar","piano","other","bass","drum","isSubmitted","isComparisonMode","isPlaying","startTime","pauseTime","isLocalDevelopment","window","location","hostname","this","tracksBaseUrl","tracks","audioContext","AudioContext","webkitAudioContext","audioBuffers","audioSources","gainNodes","analyserNodes","masterGainNode","createGain","randomGains","initGame","initAudio","connect","destination","forEach","track","createAnalyser","Math","exp","random","log","fader","document","getElementById","querySelector","value","setTrackVolume","loadAudio","playPauseBtn","textContent","disabled","Promise","all","map","response","fetch","audioData","arrayBuffer","decodeAudioData","innerHTML","console","error","createAudioSources","disconnect","createBufferSource","buffer","loop","togglePlayPause","suspend","currentTime","resume","start","requestAnimationFrame","updateTimeSlider","percentage","duration","toString","setMasterVolume","volume","gain","setValueAtTime","gainToFader","faderToGain","faderValue","pow","gainValue","setPlaybackPosition","position","newTime","wasPlaying","calculateScore","totalDifference","userGain","targetGain","logDifference","abs","log2","score","max","length","round","toggleComparisonMode","isComparison","addEventListener","e","parseFloat","target","modeToggleCheckbox","checked","scoreDisplay","style","visibility"],"sourceRoot":""}