{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://mixer-game/./src/volume-slider.ts","webpack://mixer-game/./src/index.ts"],"sourcesContent":["class VolumeSlider extends HTMLElement {\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n    }\n    connectedCallback() {\n        this.render();\n        this.setupEventListeners();\n    }\n    render() {\n        const name = this.getAttribute('name') || 'Track';\n        this.shadowRoot.innerHTML = `\r\n      <style>\r\n        .fader {\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          width: 60px;\r\n          height: 220px;\r\n          background: #2c3e50;\r\n          border-radius: 10px;\r\n          padding: 10px 0;\r\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n        }\r\n        .slider-container {\r\n          position: relative;\r\n          height: 150px;\r\n          width: 40px;\r\n          background: #34495e;\r\n          border-radius: 20px;\r\n          display: flex;\r\n          justify-content: center;\r\n          align-items: center;\r\n          padding: 10px 0;\r\n        }\r\n        input[type=\"range\"] {\r\n          writing-mode: bt-lr;\r\n          -webkit-appearance: none;\r\n          width: 200px;\r\n          height: 10px;\r\n          background: transparent;\r\n          transform: rotate(-90deg);\r\n          z-index: 2;\r\n        }\r\n        input[type=\"range\"]::-webkit-slider-thumb {\r\n          -webkit-appearance: none;\r\n          width: 20px;\r\n          height: 40px;\r\n          background: #3498db;\r\n          cursor: pointer;\r\n          border-radius: 4px;\r\n          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n        }\r\n        .scale {\r\n          position: absolute;\r\n          left: 0;\r\n          height: 150px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          justify-content: space-between;\r\n          color: #bdc3c7;\r\n          font-size: 10px;\r\n        }\r\n        .scale span {\r\n          position: relative;\r\n        }\r\n        .scale span::before {\r\n          content: '';\r\n          position: absolute;\r\n          right: -12px;\r\n          top: 50%;\r\n          width: 8px;\r\n          height: 1px;\r\n          background: #bdc3c7;\r\n        }\r\n        label {\r\n          margin-top: 10px;\r\n          text-align: center;\r\n          color: #ecf0f1;\r\n          font-size: 12px;\r\n          font-weight: bold;\r\n        }\r\n        .value-display {\r\n          margin-top: 5px;\r\n          color: #3498db;\r\n          font-size: 14px;\r\n        }\r\n      </style>\r\n      <div class=\"fader\">\r\n        <div class=\"slider-container\">\r\n          <input type=\"range\" min=\"0\" max=\"100\" step=\"1\" value=\"80\">\r\n          <div class=\"scale\">\r\n            <span>10</span>\r\n            <span>6</span>\r\n            <span>0</span>\r\n            <span>-12</span>\r\n            <span>-24</span>\r\n            <span>-∞</span>\r\n          </div>\r\n        </div>\r\n        <label>${name}</label>\r\n        <span class=\"value-display\">0 dB</span>\r\n      </div>\r\n    `;\n        this.slider = this.shadowRoot.querySelector('input');\n        this.valueDisplay = this.shadowRoot.querySelector('.value-display');\n    }\n    setupEventListeners() {\n        this.slider.addEventListener('input', (e) => {\n            const target = e.target;\n            const value = parseInt(target.value);\n            const dbValue = this.sliderValueToDb(value);\n            this.updateValueDisplay(dbValue);\n            this.dispatchEvent(new CustomEvent('change', {\n                detail: { value: this.dbToGain(dbValue) },\n                bubbles: true,\n                composed: true\n            }));\n        });\n    }\n    setDisabled(isDisabled) {\n        this.slider.disabled = isDisabled;\n    }\n    setValue(gainValue) {\n        const dbValue = this.gainToDb(gainValue);\n        const sliderValue = this.dbToSliderValue(dbValue);\n        this.slider.value = sliderValue.toString();\n        this.updateValueDisplay(dbValue);\n    }\n    updateValueDisplay(dbValue) {\n        if (dbValue <= -70) {\n            this.valueDisplay.textContent = '-∞ dB';\n        }\n        else {\n            this.valueDisplay.textContent = `${dbValue.toFixed(1)} dB`;\n        }\n    }\n    sliderValueToDb(value) {\n        if (value === 0)\n            return -Infinity;\n        return 10 * Math.log10(value / 80); // 80 is the 0dB point (80%)\n    }\n    dbToSliderValue(db) {\n        if (db === -Infinity)\n            return 0;\n        return Math.round(80 * Math.pow(10, db / 10));\n    }\n    gainToDb(gainValue) {\n        return 20 * Math.log10(gainValue);\n    }\n    dbToGain(dbValue) {\n        return Math.pow(10, dbValue / 20);\n    }\n}\nif (!customElements.get('volume-slider')) {\n    customElements.define('volume-slider', VolumeSlider);\n}\nexport default VolumeSlider;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport VolumeSlider from \"./volume-slider\";\n// 音頻混音器遊戲\nclass MixerGame {\n    constructor() {\n        this.isAudioInitialized = false;\n        this.isAudioLoaded = false;\n        this.isAnswerMode = false;\n        this.playerSettings = {\n            vocal: 0.5,\n            guitar: 0.5,\n            piano: 0.5,\n            other: 0.5,\n            bass: 0.5,\n            drum: 0.5\n        };\n        this.isSubmitted = false;\n        this.isComparisonMode = false;\n        this.isPlaying = false;\n        this.startTime = 0;\n        this.pauseTime = 0;\n        const isLocalDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n        this.tracksBaseUrl = isLocalDevelopment\n            ? '../UpLifeSongs/以斯拉 - 至高全能神的榮光'\n            : '../../UpLifeSongs/以斯拉 - 至高全能神的榮光';\n        this.tracks = ['vocal', 'guitar', 'piano', 'other', 'bass', 'drum'];\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        this.audioBuffers = {};\n        this.audioSources = {};\n        this.gainNodes = {};\n        this.analyserNodes = {};\n        this.masterGainNode = this.audioContext.createGain();\n        this.randomGains = {};\n        // 確保 VolumeSlider 已註冊\n        if (!customElements.get('volume-slider')) {\n            customElements.define('volume-slider', VolumeSlider);\n        }\n        this.initGame();\n    }\n    initAudio() {\n        if (this.isAudioInitialized)\n            return;\n        this.masterGainNode.connect(this.audioContext.destination);\n        this.tracks.forEach(track => {\n            var _a;\n            this.gainNodes[track] = this.audioContext.createGain();\n            this.analyserNodes[track] = this.audioContext.createAnalyser();\n            this.gainNodes[track].connect(this.analyserNodes[track]);\n            this.analyserNodes[track].connect(this.masterGainNode);\n            this.randomGains[track] = Math.exp(Math.random() * Math.log(4)) / 2;\n            const fader = (_a = document.getElementById(`${track}-fader`)) === null || _a === void 0 ? void 0 : _a.querySelector('input');\n            if (fader) {\n                fader.value = '0.5';\n                this.setTrackVolume(track, 0.5);\n            }\n        });\n        this.isAudioInitialized = true;\n    }\n    loadAudio() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const playPauseBtn = document.getElementById('playPauseBtn');\n            playPauseBtn.textContent = '載入中';\n            playPauseBtn.disabled = true;\n            try {\n                yield Promise.all(this.tracks.map((track) => __awaiter(this, void 0, void 0, function* () {\n                    const response = yield fetch(`${this.tracksBaseUrl}/${track}.mp3`);\n                    const audioData = yield response.arrayBuffer();\n                    this.audioBuffers[track] = yield this.audioContext.decodeAudioData(audioData);\n                })));\n                this.isAudioLoaded = true;\n                playPauseBtn.innerHTML = '&#9658;';\n                playPauseBtn.disabled = false;\n                console.log('所有音軌已成功載入');\n            }\n            catch (error) {\n                console.error('載入音頻時發生錯誤:', error);\n                playPauseBtn.textContent = '載入失敗';\n                playPauseBtn.disabled = false;\n            }\n        });\n    }\n    createAudioSources() {\n        this.tracks.forEach(track => {\n            if (this.audioSources[track]) {\n                this.audioSources[track].disconnect();\n            }\n            this.audioSources[track] = this.audioContext.createBufferSource();\n            this.audioSources[track].buffer = this.audioBuffers[track];\n            this.audioSources[track].connect(this.gainNodes[track]);\n            this.audioSources[track].loop = true;\n        });\n    }\n    togglePlayPause() {\n        if (!this.isAudioInitialized) {\n            this.initAudio();\n            this.loadAudio();\n            return;\n        }\n        if (!this.isAudioLoaded)\n            return;\n        if (this.isPlaying) {\n            this.audioContext.suspend();\n            this.pauseTime = this.audioContext.currentTime;\n        }\n        else {\n            this.audioContext.resume();\n            if (!this.audioSources[this.tracks[0]] || !this.audioSources[this.tracks[0]].buffer) {\n                this.createAudioSources();\n                this.startTime = this.audioContext.currentTime;\n                this.tracks.forEach(track => this.audioSources[track].start());\n            }\n            else {\n                this.startTime += this.audioContext.currentTime - this.pauseTime;\n            }\n            requestAnimationFrame(() => this.updateTimeSlider());\n        }\n        this.isPlaying = !this.isPlaying;\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        playPauseBtn.innerHTML = this.isPlaying ? '&#10074;&#10074;' : '&#9658;';\n    }\n    updateTimeSlider() {\n        if (!this.isPlaying)\n            return;\n        const currentTime = this.audioContext.currentTime - this.startTime;\n        const duration = this.audioBuffers[this.tracks[0]].duration;\n        const percentage = (currentTime / duration) * 100;\n        const timeSlider = document.getElementById('timeSlider');\n        timeSlider.value = percentage.toString();\n        requestAnimationFrame(() => this.updateTimeSlider());\n    }\n    setMasterVolume(volume) {\n        if (!this.isAudioInitialized)\n            return;\n        this.masterGainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);\n    }\n    gainToFader(gain) {\n        return Math.log(gain / 0.25) / Math.log(16);\n    }\n    faderToGain(faderValue) {\n        return 0.25 * Math.pow(16, faderValue);\n    }\n    setTrackVolume(track, faderValue) {\n        if (!this.isAudioInitialized)\n            return;\n        const gainValue = this.faderToGain(faderValue);\n        this.gainNodes[track].gain.setValueAtTime(gainValue, this.audioContext.currentTime);\n    }\n    setPlaybackPosition(position) {\n        if (!this.isAudioInitialized || !this.isAudioLoaded)\n            return;\n        const duration = this.audioBuffers[this.tracks[0]].duration;\n        const newTime = (position / 100) * duration;\n        const wasPlaying = this.isPlaying;\n        if (this.isPlaying) {\n            this.audioContext.suspend();\n        }\n        this.createAudioSources();\n        this.startTime = this.audioContext.currentTime - newTime;\n        this.tracks.forEach(track => this.audioSources[track].start(0, newTime));\n        if (wasPlaying) {\n            this.audioContext.resume();\n            requestAnimationFrame(() => this.updateTimeSlider());\n        }\n        this.isPlaying = wasPlaying;\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        playPauseBtn.innerHTML = this.isPlaying ? '&#10074;&#10074;' : '&#9658;';\n    }\n    calculateScore() {\n        if (!this.isAudioInitialized || !this.isAudioLoaded)\n            return 0;\n        let totalDifference = 0;\n        this.tracks.forEach(track => {\n            const faderValue = this.playerSettings[track] || 0.5;\n            const userGain = this.faderToGain(faderValue);\n            const targetGain = 1 / this.randomGains[track];\n            const logDifference = Math.abs(Math.log2(userGain) - Math.log2(targetGain));\n            totalDifference += logDifference;\n        });\n        const score = Math.max(0, 100 - (totalDifference / this.tracks.length) * 25);\n        return Math.round(score);\n    }\n    toggleComparisonMode(isComparison) {\n        this.isComparisonMode = isComparison;\n        this.tracks.forEach(track => {\n            const fader = document.getElementById(`${track}-fader`);\n            if (isComparison) {\n                this.setTrackVolume(track, this.gainToFader(1 / this.randomGains[track]));\n                if (this.isSubmitted) {\n                    fader.setValue(this.gainToFader(1 / this.randomGains[track]));\n                }\n            }\n            else {\n                this.setTrackVolume(track, this.playerSettings[track] || 0.5);\n                fader.setValue(this.playerSettings[track] || 0.5);\n            }\n            fader.setDisabled(isComparison);\n        });\n    }\n    initGame() {\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        playPauseBtn.addEventListener('click', () => this.togglePlayPause());\n        const timeSlider = document.getElementById('timeSlider');\n        timeSlider.addEventListener('input', (e) => this.setPlaybackPosition(parseFloat(e.target.value)));\n        const masterVolume = document.getElementById('master-volume');\n        masterVolume.addEventListener('change', (e) => {\n            const customEvent = e;\n            this.setMasterVolume(customEvent.detail.value);\n        });\n        this.tracks.forEach(track => {\n            const fader = document.getElementById(`${track}-fader`);\n            fader.addEventListener('change', (e) => {\n                const customEvent = e;\n                if (!this.isAnswerMode) {\n                    const value = customEvent.detail.value;\n                    this.setTrackVolume(track, value);\n                    this.playerSettings[track] = value;\n                }\n            });\n        });\n        const modeToggleCheckbox = document.getElementById('modeToggleCheckbox');\n        modeToggleCheckbox.addEventListener('change', (e) => {\n            this.toggleComparisonMode(e.target.checked);\n        });\n        const submitBtn = document.getElementById('submitBtn');\n        submitBtn.addEventListener('click', () => {\n            const score = this.calculateScore();\n            const scoreDisplay = document.getElementById('scoreDisplay');\n            scoreDisplay.style.visibility = 'visible';\n            scoreDisplay.textContent = score.toString();\n            const comparisonLabel = document.getElementById('comparisonLabel');\n            comparisonLabel.textContent = '正確答案';\n            this.isSubmitted = true;\n            modeToggleCheckbox.checked = false;\n            this.toggleComparisonMode(false);\n        });\n    }\n}\n// 開始遊戲\nnew MixerGame();\n"],"names":["VolumeSlider","HTMLElement","constructor","super","this","attachShadow","mode","connectedCallback","render","setupEventListeners","name","getAttribute","shadowRoot","innerHTML","slider","querySelector","valueDisplay","addEventListener","e","target","value","parseInt","dbValue","sliderValueToDb","updateValueDisplay","dispatchEvent","CustomEvent","detail","dbToGain","bubbles","composed","setDisabled","isDisabled","disabled","setValue","gainValue","gainToDb","sliderValue","dbToSliderValue","toString","textContent","toFixed","Math","log10","db","round","pow","customElements","get","define","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","isAudioInitialized","isAudioLoaded","isAnswerMode","playerSettings","vocal","guitar","piano","other","bass","drum","isSubmitted","isComparisonMode","isPlaying","startTime","pauseTime","isLocalDevelopment","window","location","hostname","tracksBaseUrl","tracks","audioContext","AudioContext","webkitAudioContext","audioBuffers","audioSources","gainNodes","analyserNodes","masterGainNode","createGain","randomGains","initGame","initAudio","connect","destination","forEach","track","_a","createAnalyser","exp","random","log","fader","document","getElementById","setTrackVolume","loadAudio","playPauseBtn","all","map","response","fetch","audioData","arrayBuffer","decodeAudioData","console","error","createAudioSources","disconnect","createBufferSource","buffer","loop","togglePlayPause","suspend","currentTime","resume","start","requestAnimationFrame","updateTimeSlider","percentage","duration","setMasterVolume","volume","gain","setValueAtTime","gainToFader","faderToGain","faderValue","setPlaybackPosition","position","newTime","wasPlaying","calculateScore","totalDifference","userGain","targetGain","logDifference","abs","log2","score","max","length","toggleComparisonMode","isComparison","parseFloat","customEvent","modeToggleCheckbox","checked","scoreDisplay","style","visibility"],"sourceRoot":""}