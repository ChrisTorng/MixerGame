{"version":3,"file":"bundle.min.js","mappings":"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","sources":["webpack://mixer-game/./src/volume-slider.ts","webpack://mixer-game/./src/index.ts"],"sourcesContent":["class VolumeSlider extends HTMLElement {\n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open' });\n    }\n    connectedCallback() {\n        this.render();\n        this.setupEventListeners();\n    }\n    render() {\n        const name = this.getAttribute('name') || 'Track';\n        this.shadowRoot.innerHTML = `\r\n      <style>\r\n        .fader {\r\n          display: flex;\r\n          flex-direction: column;\r\n          align-items: center;\r\n          margin: 0 10px 20px;\r\n        }\r\n        input[type=\"range\"] {\r\n          writing-mode: vertical-lr;\r\n          direction: rtl;\r\n          width: 20px;\r\n          height: 150px;\r\n          margin: 0 10px;\r\n        }\r\n        label {\r\n          margin-top: 10px;\r\n          text-align: center;\r\n          color: white;\r\n        }\r\n      </style>\r\n      <div class=\"fader\">\r\n        <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.5\" orient=\"vertical\">\r\n        <label>${name}</label>\r\n      </div>\r\n    `;\n        this.slider = this.shadowRoot.querySelector('input');\n    }\n    setupEventListeners() {\n        this.slider.addEventListener('input', (e) => {\n            const target = e.target;\n            this.dispatchEvent(new CustomEvent('change', {\n                detail: { value: parseFloat(target.value) },\n                bubbles: true,\n                composed: true\n            }));\n        });\n    }\n    setDisabled(isDisabled) {\n        this.slider.disabled = isDisabled;\n    }\n    setValue(value) {\n        this.slider.value = value.toString();\n    }\n}\n// 只在元素未被定義時進行註冊\nif (!customElements.get('volume-slider')) {\n    customElements.define('volume-slider', VolumeSlider);\n}\nexport default VolumeSlider;\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport VolumeSlider from \"./volume-slider\";\n// 音頻混音器遊戲\nclass MixerGame {\n    constructor() {\n        this.isAudioInitialized = false;\n        this.isAudioLoaded = false;\n        this.isAnswerMode = false;\n        this.playerSettings = {\n            vocal: 0.5,\n            guitar: 0.5,\n            piano: 0.5,\n            other: 0.5,\n            bass: 0.5,\n            drum: 0.5\n        };\n        this.isSubmitted = false;\n        this.isComparisonMode = false;\n        this.isPlaying = false;\n        this.startTime = 0;\n        this.pauseTime = 0;\n        const isLocalDevelopment = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n        this.tracksBaseUrl = isLocalDevelopment\n            ? '../UpLifeSongs/以斯拉 - 至高全能神的榮光'\n            : '../../UpLifeSongs/以斯拉 - 至高全能神的榮光';\n        this.tracks = ['vocal', 'guitar', 'piano', 'other', 'bass', 'drum'];\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        this.audioBuffers = {};\n        this.audioSources = {};\n        this.gainNodes = {};\n        this.analyserNodes = {};\n        this.masterGainNode = this.audioContext.createGain();\n        this.randomGains = {};\n        // 確保 VolumeSlider 已註冊\n        if (!customElements.get('volume-slider')) {\n            customElements.define('volume-slider', VolumeSlider);\n        }\n        this.initGame();\n    }\n    initAudio() {\n        if (this.isAudioInitialized)\n            return;\n        this.masterGainNode.connect(this.audioContext.destination);\n        this.tracks.forEach(track => {\n            var _a;\n            this.gainNodes[track] = this.audioContext.createGain();\n            this.analyserNodes[track] = this.audioContext.createAnalyser();\n            this.gainNodes[track].connect(this.analyserNodes[track]);\n            this.analyserNodes[track].connect(this.masterGainNode);\n            this.randomGains[track] = Math.exp(Math.random() * Math.log(4)) / 2;\n            const fader = (_a = document.getElementById(`${track}-fader`)) === null || _a === void 0 ? void 0 : _a.querySelector('input');\n            if (fader) {\n                fader.value = '0.5';\n                this.setTrackVolume(track, 0.5);\n            }\n        });\n        this.isAudioInitialized = true;\n    }\n    loadAudio() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const playPauseBtn = document.getElementById('playPauseBtn');\n            playPauseBtn.textContent = '載入中';\n            playPauseBtn.disabled = true;\n            try {\n                yield Promise.all(this.tracks.map((track) => __awaiter(this, void 0, void 0, function* () {\n                    const response = yield fetch(`${this.tracksBaseUrl}/${track}.mp3`);\n                    const audioData = yield response.arrayBuffer();\n                    this.audioBuffers[track] = yield this.audioContext.decodeAudioData(audioData);\n                })));\n                this.isAudioLoaded = true;\n                playPauseBtn.innerHTML = '&#9658;';\n                playPauseBtn.disabled = false;\n                console.log('所有音軌已成功載入');\n            }\n            catch (error) {\n                console.error('載入音頻時發生錯誤:', error);\n                playPauseBtn.textContent = '載入失敗';\n                playPauseBtn.disabled = false;\n            }\n        });\n    }\n    createAudioSources() {\n        this.tracks.forEach(track => {\n            if (this.audioSources[track]) {\n                this.audioSources[track].disconnect();\n            }\n            this.audioSources[track] = this.audioContext.createBufferSource();\n            this.audioSources[track].buffer = this.audioBuffers[track];\n            this.audioSources[track].connect(this.gainNodes[track]);\n            this.audioSources[track].loop = true;\n        });\n    }\n    togglePlayPause() {\n        if (!this.isAudioInitialized) {\n            this.initAudio();\n            this.loadAudio();\n            return;\n        }\n        if (!this.isAudioLoaded)\n            return;\n        if (this.isPlaying) {\n            this.audioContext.suspend();\n            this.pauseTime = this.audioContext.currentTime;\n        }\n        else {\n            this.audioContext.resume();\n            if (!this.audioSources[this.tracks[0]] || !this.audioSources[this.tracks[0]].buffer) {\n                this.createAudioSources();\n                this.startTime = this.audioContext.currentTime;\n                this.tracks.forEach(track => this.audioSources[track].start());\n            }\n            else {\n                this.startTime += this.audioContext.currentTime - this.pauseTime;\n            }\n            requestAnimationFrame(() => this.updateTimeSlider());\n        }\n        this.isPlaying = !this.isPlaying;\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        playPauseBtn.innerHTML = this.isPlaying ? '&#10074;&#10074;' : '&#9658;';\n    }\n    updateTimeSlider() {\n        if (!this.isPlaying)\n            return;\n        const currentTime = this.audioContext.currentTime - this.startTime;\n        const duration = this.audioBuffers[this.tracks[0]].duration;\n        const percentage = (currentTime / duration) * 100;\n        const timeSlider = document.getElementById('timeSlider');\n        timeSlider.value = percentage.toString();\n        requestAnimationFrame(() => this.updateTimeSlider());\n    }\n    setMasterVolume(volume) {\n        if (!this.isAudioInitialized)\n            return;\n        this.masterGainNode.gain.setValueAtTime(volume, this.audioContext.currentTime);\n    }\n    gainToFader(gain) {\n        return Math.log(gain / 0.25) / Math.log(16);\n    }\n    faderToGain(faderValue) {\n        return 0.25 * Math.pow(16, faderValue);\n    }\n    setTrackVolume(track, faderValue) {\n        if (!this.isAudioInitialized)\n            return;\n        const gainValue = this.faderToGain(faderValue);\n        this.gainNodes[track].gain.setValueAtTime(gainValue, this.audioContext.currentTime);\n    }\n    setPlaybackPosition(position) {\n        if (!this.isAudioInitialized || !this.isAudioLoaded)\n            return;\n        const duration = this.audioBuffers[this.tracks[0]].duration;\n        const newTime = (position / 100) * duration;\n        const wasPlaying = this.isPlaying;\n        if (this.isPlaying) {\n            this.audioContext.suspend();\n        }\n        this.createAudioSources();\n        this.startTime = this.audioContext.currentTime - newTime;\n        this.tracks.forEach(track => this.audioSources[track].start(0, newTime));\n        if (wasPlaying) {\n            this.audioContext.resume();\n            requestAnimationFrame(() => this.updateTimeSlider());\n        }\n        this.isPlaying = wasPlaying;\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        playPauseBtn.innerHTML = this.isPlaying ? '&#10074;&#10074;' : '&#9658;';\n    }\n    calculateScore() {\n        if (!this.isAudioInitialized || !this.isAudioLoaded)\n            return 0;\n        let totalDifference = 0;\n        this.tracks.forEach(track => {\n            const faderValue = this.playerSettings[track] || 0.5;\n            const userGain = this.faderToGain(faderValue);\n            const targetGain = 1 / this.randomGains[track];\n            const logDifference = Math.abs(Math.log2(userGain) - Math.log2(targetGain));\n            totalDifference += logDifference;\n        });\n        const score = Math.max(0, 100 - (totalDifference / this.tracks.length) * 25);\n        return Math.round(score);\n    }\n    toggleComparisonMode(isComparison) {\n        this.isComparisonMode = isComparison;\n        this.tracks.forEach(track => {\n            const fader = document.getElementById(`${track}-fader`);\n            if (isComparison) {\n                this.setTrackVolume(track, this.gainToFader(1 / this.randomGains[track]));\n                if (this.isSubmitted) {\n                    fader.setValue(this.gainToFader(1 / this.randomGains[track]));\n                }\n            }\n            else {\n                this.setTrackVolume(track, this.playerSettings[track] || 0.5);\n                fader.setValue(this.playerSettings[track] || 0.5);\n            }\n            fader.setDisabled(isComparison);\n        });\n    }\n    initGame() {\n        const playPauseBtn = document.getElementById('playPauseBtn');\n        playPauseBtn.addEventListener('click', () => this.togglePlayPause());\n        const timeSlider = document.getElementById('timeSlider');\n        timeSlider.addEventListener('input', (e) => this.setPlaybackPosition(parseFloat(e.target.value)));\n        const masterVolume = document.getElementById('master-volume');\n        masterVolume.addEventListener('change', (e) => {\n            const customEvent = e;\n            this.setMasterVolume(customEvent.detail.value);\n        });\n        this.tracks.forEach(track => {\n            const fader = document.getElementById(`${track}-fader`);\n            fader.addEventListener('change', (e) => {\n                const customEvent = e;\n                if (!this.isAnswerMode) {\n                    const value = customEvent.detail.value;\n                    this.setTrackVolume(track, value);\n                    this.playerSettings[track] = value;\n                }\n            });\n        });\n        const modeToggleCheckbox = document.getElementById('modeToggleCheckbox');\n        modeToggleCheckbox.addEventListener('change', (e) => {\n            this.toggleComparisonMode(e.target.checked);\n        });\n        const submitBtn = document.getElementById('submitBtn');\n        submitBtn.addEventListener('click', () => {\n            const score = this.calculateScore();\n            const scoreDisplay = document.getElementById('scoreDisplay');\n            scoreDisplay.style.visibility = 'visible';\n            scoreDisplay.textContent = score.toString();\n            const comparisonLabel = document.getElementById('comparisonLabel');\n            comparisonLabel.textContent = '正確答案';\n            this.isSubmitted = true;\n            modeToggleCheckbox.checked = false;\n            this.toggleComparisonMode(false);\n        });\n    }\n}\n// 開始遊戲\nnew MixerGame();\n"],"names":["VolumeSlider","HTMLElement","constructor","super","this","attachShadow","mode","connectedCallback","render","setupEventListeners","name","getAttribute","shadowRoot","innerHTML","slider","querySelector","addEventListener","e","target","dispatchEvent","CustomEvent","detail","value","parseFloat","bubbles","composed","setDisabled","isDisabled","disabled","setValue","toString","customElements","get","define","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","isAudioInitialized","isAudioLoaded","isAnswerMode","playerSettings","vocal","guitar","piano","other","bass","drum","isSubmitted","isComparisonMode","isPlaying","startTime","pauseTime","isLocalDevelopment","window","location","hostname","tracksBaseUrl","tracks","audioContext","AudioContext","webkitAudioContext","audioBuffers","audioSources","gainNodes","analyserNodes","masterGainNode","createGain","randomGains","initGame","initAudio","connect","destination","forEach","track","_a","createAnalyser","Math","exp","random","log","fader","document","getElementById","setTrackVolume","loadAudio","playPauseBtn","textContent","all","map","response","fetch","audioData","arrayBuffer","decodeAudioData","console","error","createAudioSources","disconnect","createBufferSource","buffer","loop","togglePlayPause","suspend","currentTime","resume","start","requestAnimationFrame","updateTimeSlider","percentage","duration","setMasterVolume","volume","gain","setValueAtTime","gainToFader","faderToGain","faderValue","pow","gainValue","setPlaybackPosition","position","newTime","wasPlaying","calculateScore","totalDifference","userGain","targetGain","logDifference","abs","log2","score","max","length","round","toggleComparisonMode","isComparison","customEvent","modeToggleCheckbox","checked","scoreDisplay","style","visibility"],"sourceRoot":""}